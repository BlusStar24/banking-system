// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using user_service.Data;

#nullable disable

namespace userservice.Migrations
{
    [DbContext(typeof(UserDbContext))]
    [Migration("20250807064357_InitClean")]
    partial class InitClean
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("user_service.Models.Account", b =>
                {
                    b.Property<string>("AccountId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("account_id");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("account_number");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("balance");

                    b.Property<string>("BankCode")
                        .HasColumnType("longtext")
                        .HasColumnName("bank_code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("currency");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("customer_id");

                    b.Property<string>("Label")
                        .HasColumnType("longtext")
                        .HasColumnName("label");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .HasColumnType("longtext")
                        .HasColumnName("type");

                    b.HasKey("AccountId");

                    b.HasIndex("CustomerId");

                    b.ToTable("accounts");
                });

            modelBuilder.Entity("user_service.Models.Blacklist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("BlacklistedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("blacklisted_at");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("customer_id");

                    b.Property<string>("Reason")
                        .HasColumnType("longtext")
                        .HasColumnName("reason");

                    b.HasKey("Id");

                    b.ToTable("blacklist");
                });

            modelBuilder.Entity("user_service.Models.Customer", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("customer_id");

                    b.Property<bool>("Blacklisted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("blacklisted");

                    b.Property<string>("CCCD")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("cccd");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dob");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("gender");

                    b.Property<string>("Hometown")
                        .HasColumnType("longtext")
                        .HasColumnName("hometown");

                    b.Property<bool>("KycStatus")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("kyc_status");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("phone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.HasKey("CustomerId");

                    b.ToTable("customers");
                });

            modelBuilder.Entity("user_service.Models.Employee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("active");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<DateTime?>("HiredDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("hired_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Position")
                        .HasColumnType("longtext")
                        .HasColumnName("position");

                    b.HasKey("Id");

                    b.ToTable("employee");
                });

            modelBuilder.Entity("user_service.Models.OtpRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expires_at");

                    b.Property<string>("OtpCode")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("otp_code");

                    b.Property<bool>("Verified")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("verified");

                    b.HasKey("Id");

                    b.ToTable("otp_requests");
                });

            modelBuilder.Entity("user_service.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("user_service.Models.Transaction", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("transaction_id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("currency");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("FromAccountId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("from_account_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<string>("ToAccountId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("to_account_id");

                    b.HasKey("TransactionId");

                    b.ToTable("transactions");
                });

            modelBuilder.Entity("user_service.Models.TransactionRequest", b =>
                {
                    b.Property<string>("RequestId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("request_id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("currency");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("FromAccountId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("from_account_id");

                    b.Property<string>("OtpCode")
                        .HasColumnType("longtext")
                        .HasColumnName("otp_code");

                    b.Property<bool>("OtpVerified")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("otp_verified");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<string>("ToAccountId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("to_account_id");

                    b.HasKey("RequestId");

                    b.ToTable("transaction_requests");
                });

            modelBuilder.Entity("user_service.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.Property<string>("LinkedCustomerId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("linked_customer_id");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password_hash");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("role");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("username");

                    b.HasKey("UserId");

                    b.HasIndex("LinkedCustomerId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("user_service.Models.Account", b =>
                {
                    b.HasOne("user_service.Models.Customer", null)
                        .WithMany("Accounts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("user_service.Models.RefreshToken", b =>
                {
                    b.HasOne("user_service.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("user_service.Models.User", b =>
                {
                    b.HasOne("user_service.Models.Customer", "LinkedCustomer")
                        .WithMany()
                        .HasForeignKey("LinkedCustomerId");

                    b.Navigation("LinkedCustomer");
                });

            modelBuilder.Entity("user_service.Models.Customer", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
